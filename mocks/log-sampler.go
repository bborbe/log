// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/bborbe/log"
)

type LogSampler struct {
	IsSampleStub        func() bool
	isSampleMutex       sync.RWMutex
	isSampleArgsForCall []struct {
	}
	isSampleReturns struct {
		result1 bool
	}
	isSampleReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *LogSampler) IsSample() bool {
	fake.isSampleMutex.Lock()
	ret, specificReturn := fake.isSampleReturnsOnCall[len(fake.isSampleArgsForCall)]
	fake.isSampleArgsForCall = append(fake.isSampleArgsForCall, struct {
	}{})
	stub := fake.IsSampleStub
	fakeReturns := fake.isSampleReturns
	fake.recordInvocation("IsSample", []interface{}{})
	fake.isSampleMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *LogSampler) IsSampleCallCount() int {
	fake.isSampleMutex.RLock()
	defer fake.isSampleMutex.RUnlock()
	return len(fake.isSampleArgsForCall)
}

func (fake *LogSampler) IsSampleCalls(stub func() bool) {
	fake.isSampleMutex.Lock()
	defer fake.isSampleMutex.Unlock()
	fake.IsSampleStub = stub
}

func (fake *LogSampler) IsSampleReturns(result1 bool) {
	fake.isSampleMutex.Lock()
	defer fake.isSampleMutex.Unlock()
	fake.IsSampleStub = nil
	fake.isSampleReturns = struct {
		result1 bool
	}{result1}
}

func (fake *LogSampler) IsSampleReturnsOnCall(i int, result1 bool) {
	fake.isSampleMutex.Lock()
	defer fake.isSampleMutex.Unlock()
	fake.IsSampleStub = nil
	if fake.isSampleReturnsOnCall == nil {
		fake.isSampleReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isSampleReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *LogSampler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.isSampleMutex.RLock()
	defer fake.isSampleMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *LogSampler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ log.Sampler = new(LogSampler)
