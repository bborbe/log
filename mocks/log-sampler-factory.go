// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/bborbe/log"
)

type LogSamplerFactory struct {
	SamplerStub        func() log.Sampler
	samplerMutex       sync.RWMutex
	samplerArgsForCall []struct {
	}
	samplerReturns struct {
		result1 log.Sampler
	}
	samplerReturnsOnCall map[int]struct {
		result1 log.Sampler
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *LogSamplerFactory) Sampler() log.Sampler {
	fake.samplerMutex.Lock()
	ret, specificReturn := fake.samplerReturnsOnCall[len(fake.samplerArgsForCall)]
	fake.samplerArgsForCall = append(fake.samplerArgsForCall, struct {
	}{})
	stub := fake.SamplerStub
	fakeReturns := fake.samplerReturns
	fake.recordInvocation("Sampler", []interface{}{})
	fake.samplerMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *LogSamplerFactory) SamplerCallCount() int {
	fake.samplerMutex.RLock()
	defer fake.samplerMutex.RUnlock()
	return len(fake.samplerArgsForCall)
}

func (fake *LogSamplerFactory) SamplerCalls(stub func() log.Sampler) {
	fake.samplerMutex.Lock()
	defer fake.samplerMutex.Unlock()
	fake.SamplerStub = stub
}

func (fake *LogSamplerFactory) SamplerReturns(result1 log.Sampler) {
	fake.samplerMutex.Lock()
	defer fake.samplerMutex.Unlock()
	fake.SamplerStub = nil
	fake.samplerReturns = struct {
		result1 log.Sampler
	}{result1}
}

func (fake *LogSamplerFactory) SamplerReturnsOnCall(i int, result1 log.Sampler) {
	fake.samplerMutex.Lock()
	defer fake.samplerMutex.Unlock()
	fake.SamplerStub = nil
	if fake.samplerReturnsOnCall == nil {
		fake.samplerReturnsOnCall = make(map[int]struct {
			result1 log.Sampler
		})
	}
	fake.samplerReturnsOnCall[i] = struct {
		result1 log.Sampler
	}{result1}
}

func (fake *LogSamplerFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.samplerMutex.RLock()
	defer fake.samplerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *LogSamplerFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ log.SamplerFactory = new(LogSamplerFactory)
